{
  "version": 3,
  "sources": ["../minimal-worker.js"],
  "sourceRoot": "./worker-optimization-test",
  "sourcesContent": ["// BlockZone Lab - Minimal API Worker\r\n// Just the essential endpoints to get the backend working\r\n\r\nexport default {\r\n  async fetch(request, env) {\r\n    const corsHeaders = {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n      'Content-Type': 'application/json'\r\n    };\r\n\r\n    // Handle CORS preflight\r\n    if (request.method === 'OPTIONS') {\r\n      return new Response(null, { headers: corsHeaders });\r\n    }\r\n\r\n    try {\r\n      const url = new URL(request.url);\r\n      const path = url.pathname;\r\n\r\n      console.log('\uD83C\uDFAF Minimal worker handling:', { method: request.method, path });\r\n\r\n      // Player Status endpoint\r\n      if (path === '/api/players/status' && request.method === 'GET') {\r\n        const playerId = url.searchParams.get('player_id');\r\n        \r\n        if (!playerId) {\r\n          return new Response(JSON.stringify({ \r\n            error: 'Missing player_id parameter' \r\n          }), { status: 400, headers: corsHeaders });\r\n        }\r\n        \r\n        // Get current day (11pm EST reset)\r\n        const now = new Date();\r\n        const estOffset = -5; // EST is UTC-5\r\n        const estTime = new Date(now.getTime() + (estOffset * 60 * 60 * 1000));\r\n        \r\n        // Current day is always today's date (YYYY-MM-DD format)\r\n        const currentDay = estTime.toISOString().split('T')[0];\r\n        \r\n        // Check if we're past 11pm EST today\r\n        const isPast11pmEST = estTime.getHours() >= 23;\r\n        \r\n        // If it's past 11pm EST, they get a new free game for tomorrow\r\n        // If it's before 11pm EST, check if they used today's free game\r\n        const checkDay = isPast11pmEST ? \r\n          new Date(estTime.getTime() + (24 * 60 * 60 * 1000)).toISOString().split('T')[0] : \r\n          currentDay;\r\n          \r\n        console.log('\uD83C\uDFAF Daily reset calculation:', {\r\n          now: now.toISOString(),\r\n          estTime: estTime.toISOString(),\r\n          estHours: estTime.getHours(),\r\n          currentDay: currentDay,\r\n          isPast11pmEST: isPast11pmEST,\r\n          checkDay: checkDay,\r\n          explanation: isPast11pmEST ? 'Past 11pm EST - checking tomorrow' : 'Before 11pm EST - checking today'\r\n        });\r\n        \r\n        // Check player data\r\n        const [unlimitedPass, usedFreeGame] = await Promise.all([\r\n          env.PLAYERS.get(`unlimited_pass:${playerId}`, 'json'),\r\n          env.PLAYERS.get(`free_game:${playerId}:${checkDay}`)\r\n        ]);\r\n        \r\n        const hasUnlimitedPass = unlimitedPass && unlimitedPass.expiry > Date.now();\r\n        const hasUsedFreeGame = !!usedFreeGame;\r\n        \r\n        // Calculate next reset time\r\n        const nextReset = new Date(estTime);\r\n        nextReset.setHours(23, 0, 0, 0); // 11:00 PM EST\r\n        if (estTime.getHours() >= 23) {\r\n          nextReset.setDate(nextReset.getDate() + 1);\r\n        }\r\n        \r\n        return new Response(JSON.stringify({\r\n          player_id: playerId,\r\n          current_day: currentDay,\r\n          has_unlimited_pass: hasUnlimitedPass,\r\n          has_used_free_game: hasUsedFreeGame,\r\n          can_play_free: !hasUsedFreeGame && !hasUnlimitedPass,\r\n          requires_payment: hasUsedFreeGame && !hasUnlimitedPass,\r\n          next_reset: nextReset.toISOString(),\r\n          status: hasUnlimitedPass ? 'unlimited' : hasUsedFreeGame ? 'payment_required' : 'free_game_available'\r\n        }), { headers: corsHeaders });\r\n      }\r\n\r\n      // Grant unlimited pass endpoint\r\n      if (path === '/api/player/grant-unlimited-pass' && request.method === 'POST') {\r\n        try {\r\n          const { player_id } = await request.json();\r\n          \r\n          if (!player_id) {\r\n            return new Response(JSON.stringify({ \r\n              error: 'Missing player_id parameter' \r\n            }), { status: 400, headers: corsHeaders });\r\n          }\r\n          \r\n          // Calculate expiry (24 hours from now)\r\n          const expiry = Date.now() + (24 * 60 * 60 * 1000);\r\n          \r\n          // Store unlimited pass\r\n          await env.PLAYERS.put(`unlimited_pass:${player_id}`, JSON.stringify({\r\n            player_id,\r\n            expiry,\r\n            granted_at: Date.now()\r\n          }));\r\n          \r\n          console.log('\u2705 Unlimited pass granted for player:', player_id);\r\n          \r\n          return new Response(JSON.stringify({\r\n            success: true,\r\n            player_id,\r\n            expiry: new Date(expiry).toISOString()\r\n          }), { headers: corsHeaders });\r\n          \r\n        } catch (error) {\r\n          console.error('\u274C Error granting unlimited pass:', error);\r\n          return new Response(JSON.stringify({ \r\n            error: 'Failed to grant unlimited pass' \r\n          }), { status: 500, headers: corsHeaders });\r\n        }\r\n      }\r\n\r\n      // Get player by device fingerprint\r\n      if (path.startsWith('/api/player/fingerprint/') && request.method === 'GET') {\r\n        const fingerprint = path.split('/').pop();\r\n        \r\n        if (!fingerprint || fingerprint.length < 8) {\r\n          return new Response(JSON.stringify({ \r\n            error: 'Invalid fingerprint format' \r\n          }), { status: 400, headers: corsHeaders });\r\n        }\r\n        \r\n        try {\r\n          const fingerprintKey = `fingerprint:${fingerprint}`;\r\n          const playerData = await env.PLAYERS.get(fingerprintKey);\r\n          \r\n          if (playerData) {\r\n            const player = JSON.parse(playerData);\r\n            console.log('\u2705 Found existing player by fingerprint:', player.displayName);\r\n            \r\n            // Update last seen\r\n            player.last_seen = Date.now();\r\n            await env.PLAYERS.put(fingerprintKey, JSON.stringify(player));\r\n            \r\n            return new Response(JSON.stringify(player), { headers: corsHeaders });\r\n          } else {\r\n            console.log('\uD83D\uDCE1 No player found for fingerprint:', fingerprint);\r\n            return new Response(JSON.stringify({ \r\n              error: 'Player not found',\r\n              fingerprint \r\n            }), { status: 404, headers: corsHeaders });\r\n          }\r\n        } catch (error) {\r\n          console.error('\u274C Error fetching player by fingerprint:', error);\r\n          return new Response(JSON.stringify({ \r\n            error: 'Database error',\r\n            details: error.message \r\n          }), { status: 500, headers: corsHeaders });\r\n        }\r\n      }\r\n\r\n      // Create player with fingerprint (prevents duplicates)\r\n      if (path === '/api/player/create' && request.method === 'POST') {\r\n        try {\r\n          const playerData = await request.json();\r\n          console.log('\uD83C\uDFAF New player creation request:', playerData);\r\n          \r\n          const { device_fingerprint, wallet_address, displayName, quark_balance } = playerData;\r\n          \r\n          if (!device_fingerprint || !wallet_address) {\r\n            return new Response(JSON.stringify({ \r\n              error: 'Missing required fields: device_fingerprint, wallet_address' \r\n            }), { status: 400, headers: corsHeaders });\r\n          }\r\n          \r\n          // Check if player already exists for this fingerprint\r\n          const fingerprintKey = `fingerprint:${device_fingerprint}`;\r\n          const existingPlayer = await env.PLAYERS.get(fingerprintKey);\r\n          \r\n          if (existingPlayer) {\r\n            console.log('\uD83D\uDEAB Player already exists for fingerprint:', device_fingerprint);\r\n            return new Response(JSON.stringify({ \r\n              error: 'Player already exists for this device',\r\n              existing_player: JSON.parse(existingPlayer)\r\n            }), { status: 409, headers: corsHeaders });\r\n          }\r\n          \r\n          // Create new player\r\n          const newPlayer = {\r\n            id: `player_${device_fingerprint}`,\r\n            device_fingerprint,\r\n            wallet_address,\r\n            displayName: displayName || `Player#${wallet_address.slice(-4).toUpperCase()}`,\r\n            created_at: Date.now(),\r\n            last_seen: Date.now(),\r\n            quark_balance: quark_balance || 10, // Signup bonus\r\n            sonic_network: 'mainnet',\r\n            version: '3.0',\r\n            games_played: 0,\r\n            high_score: 0,\r\n            total_score: 0\r\n          };\r\n          \r\n          // Store with fingerprint as primary key\r\n          await env.PLAYERS.put(fingerprintKey, JSON.stringify(newPlayer));\r\n          \r\n          // Also store with player ID for secondary lookup\r\n          const playerKey = `player:${newPlayer.id}`;\r\n          await env.PLAYERS.put(playerKey, JSON.stringify(newPlayer));\r\n          \r\n          console.log('\u2705 New player created successfully:', newPlayer.displayName);\r\n          \r\n          return new Response(JSON.stringify({\r\n            success: true,\r\n            player: newPlayer,\r\n            message: 'Player created successfully'\r\n          }), { headers: corsHeaders });\r\n          \r\n        } catch (error) {\r\n          console.error('\u274C Player creation error:', error);\r\n          return new Response(JSON.stringify({ \r\n            error: 'Failed to create player',\r\n            details: error.message \r\n          }), { status: 500, headers: corsHeaders });\r\n        }\r\n      }\r\n\r\n      // Mark free game as used\r\n      if (path === '/api/player/use-free-game' && request.method === 'POST') {\r\n        try {\r\n          const { player_id } = await request.json();\r\n          \r\n          if (!player_id) {\r\n            return new Response(JSON.stringify({ \r\n              error: 'Missing player_id parameter' \r\n            }), { status: 400, headers: corsHeaders });\r\n          }\r\n          \r\n          // Get current day (11pm EST reset)\r\n          const now = new Date();\r\n          const estOffset = -5; // EST is UTC-5\r\n          const estTime = new Date(now.getTime() + (estOffset * 60 * 60 * 1000));\r\n          \r\n          // Current day is always today's date (YYYY-MM-DD format)\r\n          const currentDay = estTime.toISOString().split('T')[0];\r\n          \r\n          // Check if we're past 11pm EST today\r\n          const isPast11pmEST = estTime.getHours() >= 23;\r\n          \r\n          // If it's past 11pm EST, they get a new free game for tomorrow\r\n          // If it's before 11pm EST, check if they used today's free game\r\n          const checkDay = isPast11pmEST ? \r\n            new Date(estTime.getTime() + (24 * 60 * 60 * 1000)).toISOString().split('T')[0] : \r\n            currentDay;\r\n          \r\n          console.log('\uD83C\uDFAF Use free game - Daily reset calculation:', {\r\n            now: now.toISOString(),\r\n            estTime: estTime.toISOString(),\r\n            estHours: estTime.getHours(),\r\n            currentDay: currentDay,\r\n            isPast11pmEST: isPast11pmEST,\r\n            checkDay: checkDay,\r\n            playerId: player_id,\r\n            explanation: isPast11pmEST ? 'Past 11pm EST - marking tomorrow as used' : 'Before 11pm EST - marking today as used'\r\n          });\r\n          \r\n          // Mark free game as used for the appropriate day\r\n          await env.PLAYERS.put(`free_game:${player_id}:${checkDay}`, JSON.stringify({\r\n            player_id,\r\n            used_at: Date.now(),\r\n            day: checkDay\r\n          }));\r\n          \r\n          console.log('\u2705 Free game marked as used for player:', player_id, 'day:', checkDay);\r\n          \r\n          return new Response(JSON.stringify({\r\n            success: true,\r\n            player_id,\r\n            day: checkDay\r\n          }), { headers: corsHeaders });\r\n          \r\n        } catch (error) {\r\n          console.error('\u274C Error marking free game as used:', error);\r\n          return new Response(JSON.stringify({ \r\n            error: 'Failed to mark free game as used' \r\n          }), { status: 500, headers: corsHeaders });\r\n        }\r\n      }\r\n\r\n      // NEW: Update player stats and Quark balance\r\n      if (path === '/api/player/update-stats' && request.method === 'POST') {\r\n        try {\r\n          const statsData = await request.json();\r\n          console.log('\uD83C\uDFAF Player stats update request:', statsData);\r\n          \r\n          const { device_fingerprint, games_played, high_score, total_score, quark_balance, displayName, username, wallet_address } = statsData;\r\n          \r\n          if (!device_fingerprint) {\r\n            return new Response(JSON.stringify({ \r\n              error: 'Missing required field: device_fingerprint' \r\n            }), { status: 400, headers: corsHeaders });\r\n          }\r\n          \r\n          // Get existing player\r\n          const fingerprintKey = `fingerprint:${device_fingerprint}`;\r\n          const existingPlayerData = await env.PLAYERS.get(fingerprintKey);\r\n          \r\n          if (!existingPlayerData) {\r\n            return new Response(JSON.stringify({ \r\n              error: 'Player not found for fingerprint',\r\n              fingerprint: device_fingerprint \r\n            }), { status: 404, headers: corsHeaders });\r\n          }\r\n          \r\n          // Update player stats\r\n          const player = JSON.parse(existingPlayerData);\r\n          player.games_played = games_played || player.games_played || 0;\r\n          player.high_score = high_score || player.high_score || 0;\r\n          player.total_score = total_score || player.total_score || 0;\r\n          player.quark_balance = quark_balance || player.quark_balance || 0;\r\n          player.last_seen = Date.now();\r\n          \r\n          // Update display name and username if provided\r\n          if (displayName) {\r\n            player.displayName = displayName;\r\n            console.log('\uD83C\uDFAE Updated display name:', displayName);\r\n          }\r\n          if (username) {\r\n            player.username = username;\r\n            console.log('\uD83D\uDC64 Updated username:', username);\r\n          }\r\n          if (wallet_address) {\r\n            player.wallet_address = wallet_address;\r\n            console.log('\uD83D\uDCB0 Updated wallet address:', wallet_address);\r\n          }\r\n          \r\n          // Store updated player\r\n          await env.PLAYERS.put(fingerprintKey, JSON.stringify(player));\r\n          \r\n          // Also update secondary key\r\n          const playerKey = `player:${player.id}`;\r\n          await env.PLAYERS.put(playerKey, JSON.stringify(player));\r\n          \r\n          console.log('\u2705 Player stats updated successfully:', player.displayName);\r\n          \r\n          return new Response(JSON.stringify({\r\n            success: true,\r\n            player: player,\r\n            message: 'Stats updated successfully'\r\n          }), { headers: corsHeaders });\r\n          \r\n        } catch (error) {\r\n          console.error('\u274C Stats update error:', error);\r\n          return new Response(JSON.stringify({ \r\n            error: 'Failed to update player stats',\r\n            details: error.message \r\n          }), { status: 500, headers: corsHeaders });\r\n        }\r\n      }\r\n\r\n      // Player Registration endpoint (legacy - keeping for compatibility)\r\n      if (path === '/api/players/register' && request.method === 'POST') {\r\n        try {\r\n          const playerData = await request.json();\r\n          console.log('\uD83C\uDFAF Player registration received:', playerData);\r\n          \r\n          const { playerId, gameName, displayName, walletAddress, isAccountAbstraction } = playerData;\r\n          \r\n          if (!playerId || !gameName || !displayName) {\r\n            return new Response(JSON.stringify({ \r\n              error: 'Missing required fields: playerId, gameName, displayName' \r\n            }), { status: 400, headers: corsHeaders });\r\n          }\r\n          \r\n          // Create player profile\r\n          const playerProfile = {\r\n            player_id: playerId,\r\n            game_name: gameName,\r\n            display_name: displayName,\r\n            wallet_address: walletAddress || null,\r\n            is_account_abstraction: isAccountAbstraction || false,\r\n            created_at: Date.now(),\r\n            last_activity: Date.now(),\r\n            tier: 'player',\r\n            current_high_score: 0\r\n          };\r\n          \r\n          // Store player profile\r\n          await env.PLAYERS.put(`profile:${playerId}`, JSON.stringify(playerProfile));\r\n          \r\n          console.log('\u2705 Player registered successfully:', playerProfile);\r\n          \r\n          return new Response(JSON.stringify({\r\n            success: true,\r\n            player_id: playerId,\r\n            display_name: displayName,\r\n            message: 'Player registered successfully'\r\n          }), { headers: corsHeaders });\r\n          \r\n        } catch (error) {\r\n          console.error('\u274C Player registration error:', error);\r\n          return new Response(JSON.stringify({ \r\n            error: 'Failed to register player',\r\n            details: error.message \r\n          }), { status: 500, headers: corsHeaders });\r\n        }\r\n      }\r\n\r\n      // Daily cleanup endpoint (can be called by cron job)\r\n      if (path === '/api/admin/daily-cleanup' && request.method === 'POST') {\r\n        try {\r\n          console.log('\uD83E\uDDF9 Starting daily cleanup process...');\r\n          \r\n          // Get current day\r\n          const now = new Date();\r\n          const estOffset = -5; // EST is UTC-5\r\n          const estTime = new Date(now.getTime() + (estOffset * 60 * 60 * 1000));\r\n          const currentDay = estTime.toISOString().split('T')[0];\r\n          \r\n          // Calculate 7 days ago for cleanup\r\n          const sevenDaysAgo = new Date(estTime.getTime() - (7 * 24 * 60 * 60 * 1000));\r\n          const cleanupDate = sevenDaysAgo.toISOString().split('T')[0];\r\n          \r\n          console.log('\uD83E\uDDF9 Cleanup info:', {\r\n            currentDay: currentDay,\r\n            cleanupDate: cleanupDate,\r\n            explanation: 'Cleaning up free game records older than 7 days'\r\n          });\r\n          \r\n          // Note: In a real implementation, you would list and delete old keys\r\n          // For now, we'll just log the cleanup process\r\n          \r\n          return new Response(JSON.stringify({\r\n            success: true,\r\n            message: 'Daily cleanup completed',\r\n            currentDay: currentDay,\r\n            cleanupDate: cleanupDate\r\n          }), { headers: corsHeaders });\r\n          \r\n        } catch (error) {\r\n          console.error('\u274C Error during daily cleanup:', error);\r\n          return new Response(JSON.stringify({ \r\n            error: 'Failed to perform daily cleanup' \r\n          }), { status: 500, headers: corsHeaders });\r\n        }\r\n      }\r\n\r\n      // Score submission endpoint\r\n      if (path === '/api/scores' && request.method === 'POST') {\r\n        try {\r\n          const scoreData = await request.json();\r\n          console.log('\uD83C\uDFAF Score submission received:', scoreData);\r\n          \r\n          const { player_id, player_name, score, game_type = 'neon_drop', seed, timestamp } = scoreData;\r\n          \r\n          if (!player_id || !score) {\r\n            return new Response(JSON.stringify({ \r\n              error: 'Missing required fields: player_id, score' \r\n            }), { status: 400, headers: corsHeaders });\r\n          }\r\n          \r\n          // Get current day for leaderboard\r\n          const now = new Date();\r\n          const estOffset = -5;\r\n          const estTime = new Date(now.getTime() + (estOffset * 60 * 60 * 1000));\r\n          const currentDay = estTime.getHours() >= 23 \r\n            ? estTime.toISOString().split('T')[0] \r\n            : new Date(estTime.getTime() - (24 * 60 * 60 * 1000)).toISOString().split('T')[0];\r\n          \r\n          // Create score entry\r\n          const scoreEntry = {\r\n            player_id,\r\n            display_name: player_name || `Player ${player_id}`,\r\n            score: parseInt(score),\r\n            game_type,\r\n            seed: seed || null,\r\n            timestamp: timestamp || Date.now(),\r\n            submitted_at: new Date().toISOString()\r\n          };\r\n          \r\n          // Store score in SCORES namespace\r\n          const scoreKey = `score:${player_id}:${Date.now()}`;\r\n          await env.SCORES.put(scoreKey, JSON.stringify(scoreEntry));\r\n          \r\n          // Update daily leaderboard\r\n          const leaderboardKey = `leaderboard:${game_type}:${currentDay}`;\r\n          let leaderboard = await env.SCORES.get(leaderboardKey, 'json');\r\n          \r\n          if (!leaderboard) {\r\n            leaderboard = { scores: [], last_updated: new Date().toISOString() };\r\n          }\r\n          \r\n          // Add new score\r\n          leaderboard.scores.push(scoreEntry);\r\n          \r\n          // Sort by score (highest first) and keep top 100\r\n          leaderboard.scores.sort((a, b) => b.score - a.score);\r\n          leaderboard.scores = leaderboard.scores.slice(0, 100);\r\n          leaderboard.last_updated = new Date().toISOString();\r\n          \r\n          // Save updated leaderboard\r\n          await env.SCORES.put(leaderboardKey, JSON.stringify(leaderboard));\r\n          \r\n          console.log('\u2705 Score submitted successfully:', scoreEntry);\r\n          \r\n          return new Response(JSON.stringify({\r\n            success: true,\r\n            score_id: scoreKey,\r\n            rank: leaderboard.scores.findIndex(s => s.player_id === player_id) + 1,\r\n            total_scores: leaderboard.scores.length\r\n          }), { headers: corsHeaders });\r\n          \r\n        } catch (error) {\r\n          console.error('\u274C Score submission error:', error);\r\n          return new Response(JSON.stringify({ \r\n            error: 'Failed to submit score',\r\n            details: error.message \r\n          }), { status: 500, headers: corsHeaders });\r\n        }\r\n      }\r\n\r\n      // Leaderboard endpoint\r\n      if (path === '/api/leaderboard' && request.method === 'GET') {\r\n        const gameType = url.searchParams.get('game_type') || 'neon_drop';\r\n        const period = url.searchParams.get('period') || 'daily';\r\n        \r\n        // Get current day\r\n        const now = new Date();\r\n        const estOffset = -5;\r\n        const estTime = new Date(now.getTime() + (estOffset * 60 * 60 * 1000));\r\n        const currentDay = estTime.getHours() >= 23 \r\n          ? estTime.toISOString().split('T')[0] \r\n          : new Date(estTime.getTime() - (24 * 60 * 60 * 1000)).toISOString().split('T')[0];\r\n        \r\n        try {\r\n          let leaderboardKey;\r\n          if (period === 'daily') {\r\n            leaderboardKey = `leaderboard:${gameType}:${currentDay}`;\r\n          } else if (period === 'all') {\r\n            leaderboardKey = `leaderboard:${gameType}:all`;\r\n          } else {\r\n            leaderboardKey = `leaderboard:${gameType}:${currentDay}`;\r\n          }\r\n          \r\n          const leaderboard = await env.SCORES.get(leaderboardKey, 'json');\r\n          \r\n          if (!leaderboard) {\r\n            return new Response(JSON.stringify({\r\n              game_type: gameType,\r\n              period: period,\r\n              scores: [],\r\n              last_updated: new Date().toISOString(),\r\n              message: 'No scores found for this period'\r\n            }), { headers: corsHeaders });\r\n          }\r\n          \r\n          return new Response(JSON.stringify({\r\n            game_type: gameType,\r\n            period: period,\r\n            scores: leaderboard.scores || [],\r\n            last_updated: leaderboard.last_updated || new Date().toISOString()\r\n          }), { headers: corsHeaders });\r\n          \r\n        } catch (error) {\r\n          console.error('\u274C Leaderboard fetch error:', error);\r\n          return new Response(JSON.stringify({ \r\n            error: 'Failed to fetch leaderboard',\r\n            details: error.message \r\n          }), { status: 500, headers: corsHeaders });\r\n        }\r\n      }\r\n\r\n      // NEW: Top players endpoint for game over screen\r\n      if (path.startsWith('/api/leaderboard/top/') && request.method === 'GET') {\r\n        const limit = parseInt(path.split('/').pop()) || 3;\r\n        const gameType = url.searchParams.get('game_type') || 'neon_drop';\r\n        \r\n        // Get current day\r\n        const now = new Date();\r\n        const estOffset = -5;\r\n        const estTime = new Date(now.getTime() + (estOffset * 60 * 60 * 1000));\r\n        const currentDay = estTime.getHours() >= 23 \r\n          ? estTime.toISOString().split('T')[0] \r\n          : new Date(estTime.getTime() - (24 * 60 * 60 * 1000)).toISOString().split('T')[0];\r\n        \r\n        try {\r\n          const leaderboardKey = `leaderboard:${gameType}:${currentDay}`;\r\n          const leaderboard = await env.SCORES.get(leaderboardKey, 'json');\r\n          \r\n          if (!leaderboard || !leaderboard.scores) {\r\n            // Return fallback data\r\n            return new Response(JSON.stringify([\r\n              { name: 'Champion', score: 85000, rank: 1 },\r\n              { name: 'Master', score: 72000, rank: 2 },\r\n              { name: 'Expert', score: 58000, rank: 3 }\r\n            ].slice(0, limit)), { headers: corsHeaders });\r\n          }\r\n          \r\n          // Sort by score and take top N\r\n          const topPlayers = leaderboard.scores\r\n            .sort((a, b) => b.score - a.score)\r\n            .slice(0, limit)\r\n            .map((entry, index) => ({\r\n              name: entry.display_name || entry.player_name || `Player${index + 1}`,\r\n              score: entry.score,\r\n              rank: index + 1\r\n            }));\r\n          \r\n          return new Response(JSON.stringify(topPlayers), { headers: corsHeaders });\r\n          \r\n        } catch (error) {\r\n          console.error('\u274C Top players fetch error:', error);\r\n          return new Response(JSON.stringify([\r\n            { name: 'Champion', score: 85000, rank: 1 },\r\n            { name: 'Master', score: 72000, rank: 2 },\r\n            { name: 'Expert', score: 58000, rank: 3 }\r\n          ].slice(0, limit)), { headers: corsHeaders });\r\n        }\r\n      }\r\n\r\n      // NEW: Player rank endpoint for game over screen\r\n      if (path.startsWith('/api/leaderboard/rank/') && request.method === 'GET') {\r\n        const playerId = path.split('/').pop();\r\n        const gameType = url.searchParams.get('game_type') || 'neon_drop';\r\n        \r\n        // Get current day\r\n        const now = new Date();\r\n        const estOffset = -5;\r\n        const estTime = new Date(now.getTime() + (estOffset * 60 * 60 * 1000));\r\n        const currentDay = estTime.getHours() >= 23 \r\n          ? estTime.toISOString().split('T')[0] \r\n          : new Date(estTime.getTime() - (24 * 60 * 60 * 1000)).toISOString().split('T')[0];\r\n        \r\n        try {\r\n          const leaderboardKey = `leaderboard:${gameType}:${currentDay}`;\r\n          const leaderboard = await env.SCORES.get(leaderboardKey, 'json');\r\n          \r\n          if (!leaderboard || !leaderboard.scores) {\r\n            return new Response(JSON.stringify({\r\n              rank: \"Top 50%\",\r\n              position: 50,\r\n              total: 100\r\n            }), { headers: corsHeaders });\r\n          }\r\n          \r\n          // Find player's position\r\n          const sortedScores = leaderboard.scores.sort((a, b) => b.score - a.score);\r\n          const playerIndex = sortedScores.findIndex(entry => \r\n            entry.player_id === playerId || \r\n            entry.display_name?.includes(playerId) ||\r\n            entry.player_name?.includes(playerId)\r\n          );\r\n          \r\n          if (playerIndex === -1) {\r\n            return new Response(JSON.stringify({\r\n              rank: \"Not ranked\",\r\n              position: null,\r\n              total: sortedScores.length\r\n            }), { headers: corsHeaders });\r\n          }\r\n          \r\n          const position = playerIndex + 1;\r\n          const total = sortedScores.length;\r\n          const percentile = Math.round((1 - position / total) * 100);\r\n          \r\n          let rankText;\r\n          if (percentile >= 95) rankText = \"Top 1%\";\r\n          else if (percentile >= 90) rankText = \"Top 5%\";\r\n          else if (percentile >= 80) rankText = \"Top 10%\";\r\n          else if (percentile >= 60) rankText = \"Top 25%\";\r\n          else if (percentile >= 40) rankText = \"Top 50%\";\r\n          else rankText = \"Top 75%\";\r\n          \r\n          return new Response(JSON.stringify({\r\n            rank: rankText,\r\n            position: position,\r\n            total: total\r\n          }), { headers: corsHeaders });\r\n          \r\n        } catch (error) {\r\n          console.error('\u274C Player rank fetch error:', error);\r\n          return new Response(JSON.stringify({\r\n            rank: \"Top 50%\",\r\n            position: 50,\r\n            total: 100\r\n          }), { headers: corsHeaders });\r\n        }\r\n      }\r\n\r\n      // Get specific key endpoint\r\n      if (path === '/api/get' && request.method === 'GET') {\r\n        const namespace = url.searchParams.get('namespace');\r\n        const key = url.searchParams.get('key');\r\n        \r\n        if (!namespace || !key) {\r\n          return new Response(JSON.stringify({ \r\n            error: 'Missing namespace or key parameter' \r\n          }), { status: 400, headers: corsHeaders });\r\n        }\r\n        \r\n        try {\r\n          const value = await env[namespace].get(key, 'json');\r\n          return new Response(JSON.stringify({\r\n            namespace,\r\n            key,\r\n            value,\r\n            found: true\r\n          }, null, 2), { headers: corsHeaders });\r\n        } catch (error) {\r\n          return new Response(JSON.stringify({\r\n            namespace,\r\n            key,\r\n            error: error.message,\r\n            found: false\r\n          }, null, 2), { headers: corsHeaders });\r\n        }\r\n      }\r\n\r\n      // Delete specific key endpoint\r\n      if (path === '/api/delete' && request.method === 'DELETE') {\r\n        const namespace = url.searchParams.get('namespace');\r\n        const key = url.searchParams.get('key');\r\n        \r\n        if (!namespace || !key) {\r\n          return new Response(JSON.stringify({ \r\n            error: 'Missing namespace or key parameter' \r\n          }), { status: 400, headers: corsHeaders });\r\n        }\r\n        \r\n        try {\r\n          await env[namespace].delete(key);\r\n          return new Response(JSON.stringify({\r\n            namespace,\r\n            key,\r\n            deleted: true,\r\n            message: 'Key deleted successfully'\r\n          }, null, 2), { headers: corsHeaders });\r\n        } catch (error) {\r\n          return new Response(JSON.stringify({\r\n            namespace,\r\n            key,\r\n            error: error.message,\r\n            deleted: false\r\n          }, null, 2), { status: 500, headers: corsHeaders });\r\n        }\r\n      }\r\n\r\n      // Player Profile endpoint\r\n      if (path === '/api/players/profile' && request.method === 'GET') {\r\n        const playerId = url.searchParams.get('player_id');\r\n        \r\n        if (!playerId) {\r\n          return new Response(JSON.stringify({ \r\n            error: 'Missing player_id parameter' \r\n          }), { status: 400, headers: corsHeaders });\r\n        }\r\n        \r\n        try {\r\n          // Get player status first\r\n          const statusResponse = await fetch(`${url.origin}/api/players/status?player_id=${encodeURIComponent(playerId)}`);\r\n          let statusData = null;\r\n          \r\n          if (statusResponse.ok) {\r\n            statusData = await statusResponse.json();\r\n          }\r\n          \r\n          // Get or create profile\r\n          const profileKey = `profile:${playerId}`;\r\n          const existingProfile = await env.PLAYERS.get(profileKey, 'json');\r\n          \r\n          if (existingProfile) {\r\n            // Update profile with current status\r\n            existingProfile.status = statusData;\r\n            existingProfile.last_activity = Date.now();\r\n            \r\n            return new Response(JSON.stringify({\r\n              success: true,\r\n              profile: existingProfile\r\n            }), { headers: corsHeaders });\r\n          } else {\r\n            // Profile doesn't exist - return 404 so PlayerProfile can create one\r\n            return new Response(JSON.stringify({ \r\n              error: 'Profile not found' \r\n            }), { status: 404, headers: corsHeaders });\r\n          }\r\n        } catch (error) {\r\n          console.error('\u274C Profile fetch error:', error);\r\n          return new Response(JSON.stringify({ \r\n            error: 'Failed to fetch profile' \r\n          }), { status: 500, headers: corsHeaders });\r\n        }\r\n      }\r\n\r\n      // Daily seed endpoint for anti-cheat\r\n      if (path === '/api/daily-seed' && request.method === 'POST') {\r\n        try {\r\n          const { date, game } = await request.json();\r\n          \r\n          if (!date || !game) {\r\n            return new Response(JSON.stringify({ \r\n              error: 'Missing date or game parameter' \r\n            }), { status: 400, headers: corsHeaders });\r\n          }\r\n          \r\n          // Create deterministic seed using Web Crypto API (Cloudflare Workers compatible)\r\n          const baseString = `${game}_${date}_${env.SEED_SALT || 'blockzone_default_salt'}`;\r\n          const encoder = new TextEncoder();\r\n          const data = encoder.encode(baseString);\r\n          const hashBuffer = await crypto.subtle.digest('SHA-256', data);\r\n          const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n          const seed = hashArray.slice(0, 8).map(b => b.toString(16).padStart(2, '0')).join('');\r\n          \r\n          return new Response(JSON.stringify({\r\n            seed: parseInt(seed.substring(0, 8), 16),\r\n            date: date,\r\n            game: game\r\n          }), { headers: corsHeaders });\r\n        } catch (error) {\r\n          console.error('\u274C Daily seed generation error:', error);\r\n          return new Response(JSON.stringify({ \r\n            error: 'Failed to generate daily seed' \r\n          }), { status: 500, headers: corsHeaders });\r\n        }\r\n      }\r\n\r\n      // Combined Game-Over endpoint (replaces 3 separate API calls)\r\n      if (path === '/api/game-over' && request.method === 'POST') {\r\n        try {\r\n          const gameOverData = await request.json();\r\n          console.log('\uD83C\uDFAF Combined game-over API called:', gameOverData);\r\n          \r\n          const { score, playerId, gameData } = gameOverData;\r\n          \r\n          if (!score || !playerId) {\r\n            return new Response(JSON.stringify({ \r\n              error: 'Missing required fields: score, playerId' \r\n            }), { status: 400, headers: corsHeaders });\r\n          }\r\n          \r\n          // Get current day for leaderboard\r\n          const now = new Date();\r\n          const estOffset = -5;\r\n          const estTime = new Date(now.getTime() + (estOffset * 60 * 60 * 1000));\r\n          const currentDay = estTime.getHours() >= 23 \r\n            ? estTime.toISOString().split('T')[0] \r\n            : new Date(estTime.getTime() - (24 * 60 * 60 * 1000)).toISOString().split('T')[0];\r\n          \r\n          // 1. SUBMIT SCORE\r\n          const scoreEntry = {\r\n            player_id: playerId,\r\n            display_name: gameData?.playerName || `Player ${playerId}`,\r\n            score: parseInt(score),\r\n            game_type: gameData?.gameType || 'neon_drop',\r\n            seed: gameData?.seed || null,\r\n            timestamp: gameData?.timestamp || Date.now(),\r\n            submitted_at: new Date().toISOString()\r\n          };\r\n          \r\n          // Store score\r\n          const scoreKey = `score:${playerId}:${Date.now()}`;\r\n          await env.SCORES.put(scoreKey, JSON.stringify(scoreEntry));\r\n          \r\n          // Update daily leaderboard\r\n          const leaderboardKey = `leaderboard:neon_drop:${currentDay}`;\r\n          let leaderboard = await env.SCORES.get(leaderboardKey, 'json');\r\n          \r\n          if (!leaderboard) {\r\n            leaderboard = { scores: [], last_updated: new Date().toISOString() };\r\n          }\r\n          \r\n          leaderboard.scores.push(scoreEntry);\r\n          leaderboard.scores.sort((a, b) => b.score - a.score);\r\n          leaderboard.scores = leaderboard.scores.slice(0, 100);\r\n          leaderboard.last_updated = new Date().toISOString();\r\n          \r\n          await env.SCORES.put(leaderboardKey, JSON.stringify(leaderboard));\r\n          \r\n          // Find player's rank\r\n          const playerRank = leaderboard.scores.findIndex(s => s.player_id === playerId) + 1;\r\n          \r\n          // 2. GET LEADERBOARD DATA\r\n          const top3 = leaderboard.scores.slice(0, 3).map((entry, index) => ({\r\n            id: entry.player_id,\r\n            name: entry.display_name,\r\n            score: entry.score,\r\n            rank: index + 1\r\n          }));\r\n          \r\n          // 3. CHECK PLAYER ACCESS\r\n          const checkDay = estTime.getHours() >= 23 ? \r\n            new Date(estTime.getTime() + (24 * 60 * 60 * 1000)).toISOString().split('T')[0] : \r\n            currentDay;\r\n          \r\n          const [unlimitedPass, usedFreeGame] = await Promise.all([\r\n            env.PLAYERS.get(`unlimited_pass:${playerId}`, 'json'),\r\n            env.PLAYERS.get(`free_game:${playerId}:${checkDay}`)\r\n          ]);\r\n          \r\n          const hasUnlimitedPass = unlimitedPass && unlimitedPass.expiry > Date.now();\r\n          const hasUsedFreeGame = !!usedFreeGame;\r\n          \r\n          // Calculate next reset time\r\n          const nextReset = new Date(estTime);\r\n          nextReset.setHours(23, 0, 0, 0);\r\n          if (estTime.getHours() >= 23) {\r\n            nextReset.setDate(nextReset.getDate() + 1);\r\n          }\r\n          \r\n          const responseTime = Date.now() - now.getTime();\r\n          \r\n          console.log('\u2705 Combined game-over API completed successfully');\r\n          \r\n          return new Response(JSON.stringify({\r\n            scoreSubmission: {\r\n              accepted: true,\r\n              newRank: playerRank,\r\n              submittedAt: new Date().toISOString(),\r\n              success: true,\r\n              score_id: scoreKey,\r\n              total_scores: leaderboard.scores.length\r\n            },\r\n            leaderboard: {\r\n              top3: top3,\r\n              totalPlayers: leaderboard.scores.length,\r\n              lastUpdated: leaderboard.last_updated,\r\n              playerPosition: playerRank,\r\n              playerScore: score\r\n            },\r\n            playerAccess: {\r\n              canPlayAgain: hasUnlimitedPass || !hasUsedFreeGame,\r\n              reason: hasUnlimitedPass ? 'unlimited_pass' : hasUsedFreeGame ? 'payment_required' : 'free_game_available',\r\n              hasUnlimitedPass: hasUnlimitedPass,\r\n              canPlayFree: !hasUsedFreeGame && !hasUnlimitedPass,\r\n              requiresPayment: hasUsedFreeGame && !hasUnlimitedPass,\r\n              nextReset: nextReset.toISOString()\r\n            },\r\n            metadata: {\r\n              responseTime: `${responseTime}ms`,\r\n              dataFreshness: \"real-time\",\r\n              region: request.headers.get('cf-ipcountry') || 'global',\r\n              scope: 'daily',\r\n              timestamp: new Date().toISOString()\r\n            }\r\n          }), { headers: corsHeaders });\r\n          \r\n        } catch (error) {\r\n          console.error('\u274C Combined game-over API error:', error);\r\n          return new Response(JSON.stringify({ \r\n            error: 'Failed to process game-over',\r\n            details: error.message \r\n          }), { status: 500, headers: corsHeaders });\r\n        }\r\n      }\r\n\r\n      // Health check endpoint\r\n      if (path === '/api/health' && request.method === 'GET') {\r\n        return new Response(JSON.stringify({\r\n          status: 'ok',\r\n          timestamp: new Date().toISOString(),\r\n          service: 'blockzone-api',\r\n          version: '1.0.0'\r\n        }), { headers: corsHeaders });\r\n      }\r\n\r\n      return new Response(JSON.stringify({ error: 'Not found' }), {\r\n        status: 404,\r\n        headers: corsHeaders\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('\u274C Minimal worker error:', error);\r\n      return new Response(JSON.stringify({ error: error.message }), {\r\n        status: 500,\r\n        headers: corsHeaders\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n// Helper function to ensure player profile exists\r\nasync function ensurePlayerProfile(env, playerId, displayName) {\r\n  const profileKey = `profile:${playerId}`;\r\n  \r\n  // Get existing profile or create new one\r\n  const existing = await env.PLAYERS.get(profileKey, 'json');\r\n  \r\n  if (existing) {\r\n    console.log('\uD83D\uDD0D Updating existing profile for:', playerId);\r\n    // Update display name if provided and different\r\n    if (displayName && displayName !== 'Anonymous' && displayName !== existing.display_name) {\r\n      existing.display_name = displayName;\r\n      existing.last_activity = Date.now();\r\n      await env.PLAYERS.put(profileKey, JSON.stringify(existing));\r\n      console.log('\u2705 Profile updated successfully');\r\n    }\r\n  } else {\r\n    // Create new profile\r\n    if (!displayName || displayName === 'Anonymous' || displayName.trim() === '') {\r\n      console.log('\u26A0\uFE0F Cannot create anonymous profile - displayName:', displayName);\r\n      throw new Error('Cannot create anonymous player profile');\r\n    }\r\n    \r\n    const newProfile = {\r\n      player_id: playerId,\r\n      display_name: displayName,\r\n      tier: 'player',\r\n      created_at: Date.now(),\r\n      last_activity: Date.now(),\r\n      current_high_score: 0\r\n    };\r\n    \r\n    await env.PLAYERS.put(profileKey, JSON.stringify(newProfile));\r\n    console.log('\u2705 New profile created for:', playerId);\r\n  }\r\n}"],
  "mappings": "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",
  "names": []
}
