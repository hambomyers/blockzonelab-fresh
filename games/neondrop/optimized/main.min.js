var v=Object.defineProperty;var r=(o,e)=>v(o,"name",{value:e,configurable:!0});import{GameEngine as A}from"./core/game-engine.js";import{AudioSystem as R}from"./core/audio-system.js";import{Renderer as P}from"./core/renderer.js";import{Config as T,GAME_CONFIG as c}from"./config.js";import{GameOverSystem as N}from"./game-over.js";import{ViewportManager as I}from"./core/viewport-manager.js";import{ProfessionalRNG as u}from"./core/game-engine.js";let d,h,g,m;import{gameWrapper as l}from"/shared/wrapper/GameWrapper.js";import{GameContext as O}from"/shared/core/game-context.js";import{OverlayManager as p}from"/shared/core/overlay-manager.js";import{GameStateMachine as y,GameState as f}from"/shared/core/game-states.js";import{BlockchainManager as C}from"/shared/wrapper/BlockchainManager.js";class G{static{r(this,"EventBus")}constructor(){this.listeners={}}on(e,n){(this.listeners[e]||=[]).push(n)}off(e,n){this.listeners[e]=(this.listeners[e]||[]).filter(t=>t!==n)}emit(e,n){(this.listeners[e]||[]).forEach(t=>t(n))}}window.gameInstanceCount=(window.gameInstanceCount||0)+1,document.addEventListener("gameOverUIReady",o=>{const e=o.detail||{};window.eventBus&&typeof window.eventBus.emit=="function"?window.eventBus.emit("gameOverUIReady",e):window.neonDrop&&window.neonDrop.eventBus&&typeof window.neonDrop.eventBus.emit=="function"&&window.neonDrop.eventBus.emit("gameOverUIReady",e)});class w{static{r(this,"NeonDrop")}constructor(){this.instanceId=window.gameInstanceCount,this.logLevel=window.location.hostname==="localhost"?1:0,this.phase1StartTime=performance.now(),this.config=new T,this.viewport=new I,this.eventBus=new G,this.stateMachine=new y(this.eventBus),this.overlayManager=new p(this.eventBus),this.gameContext=null,this.engine=null,this.renderer=null,this.audio=null,this.input=null,this.particles=null,this.scoring=null,this.starfield=null,this.nonCriticalModulesLoaded=!1,this.gameOverHandler=null,this.running=!1,this.lastTime=0,this.accumulator=0,this.isGameOverReady=!1,this.eventsBound=!1,this.gameOverEventBound=!1,this.gameOverProcessing=!1,this.scoreSubmitted=!1}log(e,n){this.logLevel>=e&&console.log(n)}measurePerformance(e,n){return async(...t)=>{const i=performance.now(),s=await n.apply(this,t),a=performance.now()-i;return console.log(`\u23F1\uFE0F ${e}: ${a.toFixed(2)}ms`),s}}state(){return this.engine&&this.engine.getState?this.engine.getState():{}}logPerformance(){}async initialize(){try{this.log(1,"\u{1F680} NeonDrop: Starting parallel initialization..."),await this.initCriticalSystemsParallel(),this.scheduleBackgroundLoading()}catch(e){console.error("NeonDrop initialization failed:",e),this.showError("Game initialization failed: "+e.message)}}async initCriticalSystemsParallel(){window.timeStart&&window.timeStart("initCriticalSystemsParallel"),console.log("\u26A1 Phase 1: Parallel initialization of critical systems...");const[e,n]=await Promise.all([this.setupDisplayParallel(),this.createSystemsParallel()]);this.startLoop(),this.bindEvents();const t=Math.round(performance.now()-this.phase1StartTime);console.log(`\u{1F3AF} PHASE 1 COMPLETE: ${t}ms - Game is playable! ${t<=200?"\u2705":"\u26A0\uFE0F"}`),window.timeEnd&&window.timeEnd("initCriticalSystemsParallel")}scheduleBackgroundLoading(){console.log("\u{1F504} Background loading scheduled for after game starts..."),setTimeout(()=>{this.initBackgroundSystems()},1e3),console.log("\u2705 Background loading scheduled")}async initBackgroundSystems(){console.log("\u{1F504} Phase 2: Initializing background systems..."),setTimeout(async()=>{try{window.skipValidation||typeof l<"u"&&l.validateIdentity&&l.validateIdentity()}catch(e){console.warn("\u26A0\uFE0F Identity validation failed (non-blocking):",e)}},1e3),setTimeout(()=>{this.cleanupOldUI()},500),setTimeout(()=>{this.loadAdvancedSystemsInBackground()},100),setTimeout(async()=>{this.blockchainManager=new C,await this.initBlockchainInBackground()},2e3),setTimeout(()=>{this.logPerformance()},3e3),console.log("\u2705 Phase 2 scheduled: Background systems will initialize")}async setupDisplayParallel(){window.timeStart&&window.timeStart("setupDisplayParallel");const e=document.getElementById("game"),n=document.getElementById("bg");if(!e||!n)throw new Error("Canvas elements missing");const t=this.viewport.calculateOptimalDimensions(innerWidth,innerHeight);return e.width=t.canvasWidth,e.height=t.canvasHeight,n.width=innerWidth,n.height=innerHeight,this.renderer=new P(e,n,this.config,t),this.renderer.viewportManager=this.viewport,window.timeEnd&&window.timeEnd("setupDisplayParallel"),this.precomputeRendererAssets(),this.upgradeToPremiumRenderer(),!0}precomputeRendererAssets(){this.renderer&&this.renderer.ctx&&(this.gradientCache={background:this.renderer.ctx.createLinearGradient(0,0,0,this.renderer.canvas.height),glow:this.renderer.ctx.createRadialGradient(0,0,0,0,0,100)},this.gradientCache.background.addColorStop(0,"#1a1a2e"),this.gradientCache.background.addColorStop(1,"#16213e"),this.renderer.gradientCache=this.gradientCache)}setupDisplay(){return this.setupDisplayParallel()}upgradeToPremiumRenderer(){setTimeout(()=>{this.renderer&&(this.renderer.initialize&&this.renderer.initialize(),this.renderer.upgradeToPremium&&this.renderer.upgradeToPremium())},100)}async createSystemsParallel(){window.timeStart&&window.timeStart("createSystemsParallel"),console.log("\u26A1 OPTIMIZED: Creating critical systems only..."),this.engine=new A(this.config,null,null,this.eventBus);const e=await Promise.all([this.generateDailySeedFast(),this.createOverlaySystems(),this.setupMinimalInput()]);this.gameOverHandler&&this.engine&&(console.log("\u{1F517} Connecting game over system to engine for API calls"),this.engine.setGameOverSystem(this.gameOverHandler)),this.setupUIBatched(),this.scheduleNonCriticalSystems();const n=performance.now()-(window.timeStart?window.timeStart("createSystemsParallel"):0);return console.log(`\u2705 OPTIMIZED critical systems ready in ${n.toFixed(1)}ms (was 58ms)`),window.timeEnd&&window.timeEnd("createSystemsParallel"),e}async generateDailySeedFast(){console.log("\u{1F3B2} Generating daily seed (optimized with caching)...");const e=new Date().toISOString().split("T")[0],n=`dailySeed_${e}`;try{const s=localStorage.getItem(n);if(s){const a=JSON.parse(s);return console.log("\u2705 Using cached daily seed (0ms lookup)"),this.dailySeed=a.seed,this.seedDate=e,this.engine.rng=new u(a.processed),a}}catch{console.warn("Cache read failed, generating fresh seed")}const t=this.hashString(e),i=t*1689048361;try{localStorage.setItem(n,JSON.stringify({seed:t,processed:i,date:e}))}catch{console.warn("Cache write failed")}return this.dailySeed=t,this.seedDate=e,this.engine.rng=new u(i),console.log("\u2705 Daily seed generated and cached"),{seed:t,processed:i}}hashString(e){let n=0;const t=`neondrop_${e}`;for(let i=0;i<t.length;i++)n=(n<<5)-n+t.charCodeAt(i),n=n&n;return Math.abs(n)}async cacheGameEngineSeed(){return this.generateDailySeedFast()}async getVerifiedDailySeed(){const e=new Date().toISOString().split("T")[0];let n=0;const t=`neondrop_${e}`;for(let i=0;i<t.length;i++)n=(n<<5)-n+t.charCodeAt(i),n=n&n;return Math.abs(n)}async createOverlaySystems(){return this.overlayManager=new p(this.eventBus),this.gameOverHandler=new N(this.eventBus),this.overlayManager.registerOverlay("gameOver",this.gameOverHandler),!0}async createSystems(){return this.createSystemsParallel()}scheduleNonCriticalSystems(){console.log("\u{1F4C5} Scheduling non-critical systems for background loading..."),setTimeout(()=>{this.loadNonCriticalSystems()},50)}async loadNonCriticalSystems(){console.log("\u{1F504} Loading non-critical systems in background...");try{await this.loadFullInputController(),console.log("\u2705 Input controller loaded in background")}catch(n){console.error("\u274C Failed to load input controller:",n)}const e=[this.loadAdvancedSystemsInBackground?.(),this.setupGamepadSupport?.(),this.preloadAssets?.(),this.initializeAnalytics?.(),this.setupAdvancedAudio?.()].filter(Boolean);try{await Promise.all(e),console.log("\u2705 All non-critical systems loaded in background")}catch(n){console.warn("Some background systems failed to load:",n)}}async loadFullInputController(){return this.loadInputController()}setupGamepadSupport(){return console.log("\u{1F3AE} Setting up gamepad support in background..."),Promise.resolve()}preloadAssets(){return console.log("\u{1F4E6} Preloading assets in background..."),Promise.resolve()}initializeAnalytics(){return console.log("\u{1F4CA} Initializing analytics in background..."),Promise.resolve()}setupAdvancedAudio(){return console.log("\u{1F3B5} Setting up advanced audio in background..."),Promise.resolve()}loadAdvancedSystemsInBackground(){setTimeout(async()=>{try{console.log("\u{1F3B5} Starting advanced systems initialization..."),this.stateMachine=new y(this.eventBus),console.log("\u{1F3B5} Initializing audio system..."),this.audio=new R(this.config),this.audio.init(),console.log("\u2705 Audio system initialized"),this.engine.setAudioSystem(this.audio),console.log("\u2705 Audio system connected to game engine"),this.loadNonCriticalSystems(),this.gameContext=new O({eventBus:this.eventBus,engine:this.engine,overlays:this.overlayManager,audio:this.audio}),console.log("\u2705 Advanced systems initialization complete")}catch(e){console.error("\u274C Advanced systems initialization failed:",e)}},100)}setupMinimalInput(){console.log("\u{1F3AE} Setting up minimal input controller...");const e=this;this.input={activeKeys:new Set,autoRepeatTimers:new Map,autoRepeatDelays:{initial:200,repeat:50},parent:e,keyToAction:r(t=>({ArrowLeft:{type:"MOVE",dx:-1,dy:0},KeyA:{type:"MOVE",dx:-1,dy:0},ArrowRight:{type:"MOVE",dx:1,dy:0},KeyD:{type:"MOVE",dx:1,dy:0},ArrowDown:{type:"MOVE",dx:0,dy:1},KeyS:{type:"MOVE",dx:0,dy:1},ArrowUp:{type:"ROTATE",direction:1},KeyW:{type:"ROTATE",direction:1},KeyZ:{type:"ROTATE",direction:-1},ShiftLeft:{type:"ROTATE",direction:-1},KeyX:{type:"ROTATE",direction:1},ControlLeft:{type:"ROTATE",direction:1},ControlRight:{type:"ROTATE",direction:1},Space:{type:"HARD_DROP"},KeyF:{type:"HARD_DROP"},KeyC:{type:"HOLD"},ShiftRight:{type:"HOLD"},Escape:{type:"PAUSE"},Enter:{type:"ENTER"},KeyP:{type:"PAUSE"}})[t],"keyToAction"),onKeyDown:r(t=>{const i=e.engine?.getState();if(i&&i.phase==="MENU"&&(t.code==="Space"||t.code==="Enter")){if(t.preventDefault(),e.input.activeKeys.has(t.code))return;e.input.activeKeys.add(t.code),e.handleAction({type:"START_GAME"});return}if(!e.input.shouldCaptureGameKeys()||(e.input.isGameKey(t.code)&&t.preventDefault(),e.input.activeKeys.has(t.code)))return;e.input.activeKeys.add(t.code);const s=e.input.keyToAction(t.code);s&&(e.input.processAction(s),s.type==="MOVE"&&(s.dx!==0||s.dy!==0)&&e.input.startAutoRepeat(t.code,s))},"onKeyDown"),onKeyUp:r(t=>{e.input.activeKeys.delete(t.code),e.input.stopAutoRepeat(t.code)},"onKeyUp"),shouldCaptureGameKeys(){const t=document.activeElement;if(t&&(t.tagName==="INPUT"||t.tagName==="TEXTAREA"||t.contentEditable==="true"))return!1;const i=e.engine?.getState(),s=["PLAYING","LOCKING","COUNTDOWN","PAUSED"];return!i||["GAME_OVER","GAME_OVER_SEQUENCE"].includes(i.phase)?!1:s.includes(i.phase)},isGameKey(t){return["ArrowLeft","ArrowRight","ArrowUp","ArrowDown","KeyA","KeyD","KeyW","KeyS","KeyZ","KeyX","KeyC","KeyF","KeyP","Space","Enter","Escape","ShiftLeft","ShiftRight","ControlLeft","ControlRight"].includes(t)},processAction(t){switch(e.engine?.getState()?.phase){case"MENU":e.input.handleMenuInput(t);break;case"PLAYING":case"LOCKING":case"COUNTDOWN":e.input.handleGameplayInput(t);break;case"PAUSED":e.input.handlePausedInput(t);break;case"GAME_OVER":case"GAME_OVER_SEQUENCE":e.input.handleGameOverInput(t);break}},handleMenuInput(t){(t.type==="START_GAME"||t.type==="ENTER")&&e.handleAction({type:"START_GAME"})},handleGameplayInput(t){if(t.type==="PAUSE"||t.type==="ESCAPE"){e.handleAction({type:"PAUSE"});return}if(t.type==="ROTATE"&&t.direction===1){const i=e.engine?.getState();if(i?.current&&i.current.type==="FLOAT"){e.handleAction({type:"UP_PRESSED"});return}}if(t.type==="MOVE"&&t.dy===0){const i=e.engine?.getState();if(i?.current&&i.current.type==="FLOAT"&&(e.input.activeKeys.has("ArrowUp")||e.input.activeKeys.has("KeyW"))){e.handleAction({type:"MOVE",dx:t.dx,dy:-1});return}}e.handleAction(t)},handlePausedInput(t){(t.type==="SPACE"||t.type==="ENTER"||t.type==="ESCAPE"||t.type==="PAUSE")&&e.handleAction({type:"PAUSE"})},handleGameOverInput(t){(t.type==="SPACE"||t.type==="ENTER"||t.type==="ESCAPE")&&e.handleAction({type:"RETURN_TO_MENU"})},startAutoRepeat(t,i){if(e.input.autoRepeatTimers.has(t))return;const s=setTimeout(()=>{e.input.processAction(i),e.input.autoRepeatTimers.set(t,setInterval(()=>{e.input.processAction(i)},e.input.autoRepeatDelays.repeat))},e.input.autoRepeatDelays.initial);e.input.autoRepeatTimers.set(t,s)},stopAutoRepeat(t){const i=e.input.autoRepeatTimers.get(t);i&&(clearTimeout(i),clearInterval(i),e.input.autoRepeatTimers.delete(t))},clearAllAutoRepeat(){e.input.autoRepeatTimers.forEach(t=>{clearTimeout(t),clearInterval(t)}),e.input.autoRepeatTimers.clear()},setupListeners(){document.addEventListener("keydown",t=>e.input.onKeyDown(t)),document.addEventListener("keyup",t=>e.input.onKeyUp(t)),window.addEventListener("blur",()=>e.input.clearAllAutoRepeat()),window.addEventListener("focus",()=>e.input.clearAllAutoRepeat())},destroy:r(()=>{e.input.clearAllAutoRepeat(),e.input.activeKeys.clear()},"destroy"),clearAllRepeat:r(()=>{e.input.clearAllAutoRepeat()},"clearAllRepeat")},this.input.setupListeners(),this.inputReady=!0,console.log("\u2705 Input controller created and ready for immediate gameplay"),console.log("\u{1F3AE} Input system debug info:"),console.log("  - Event listeners attached to document"),console.log("  - Key mappings configured for: Arrow keys, WASD, Space, etc."),console.log("  - Current game state will be checked on key press"),console.log("  - Auto-repeat system enabled for smooth movement"),window.testKeyboard=()=>{console.log("\u{1F3B9} Testing keyboard input..."),console.log("Press any key to test if events are being captured"),console.log("Current game state:",this.engine?.getState()?.phase)},window.keyboardHelp=()=>{console.log("\u{1F3AE} NEONDROP KEYBOARD CONTROLS:"),console.log("\u{1F4CB} MENU CONTROLS:"),console.log("  - SPACE or ENTER: Start game from menu"),console.log(""),console.log("\u{1F3AE} GAMEPLAY CONTROLS:"),console.log("  - Arrow Keys or WASD: Move piece (with auto-repeat)"),console.log("  - Arrow Up or W: Rotate clockwise (FLOAT pieces move up)"),console.log("  - Z or Shift: Rotate counter-clockwise"),console.log("  - X or Ctrl: Rotate clockwise (alternative)"),console.log("  - Space or F: Hard drop"),console.log("  - C or Shift Right: Hold piece"),console.log("  - Escape or P: Pause game"),console.log(""),console.log("\u{1F527} TROUBLESHOOTING:"),console.log("  - Run testKeyboard() to test input"),console.log("  - Check console for state changes"),console.log("  - Make sure game is in PLAYING state")},document.addEventListener("keydown",t=>{console.log("\u{1F50D} GLOBAL KEYBOARD TEST:",t.code,t.key),console.log("\u{1F3B9} KEYBOARD WORKING - PRESSED:",t.key)});let n=null;return setInterval(()=>{const t=this.engine?.getState()?.phase;t!==n&&(console.log("\u{1F504} Game state changed:",n,"\u2192",t),n=t)},1e3),Promise.resolve()}async loadInputController(){console.log("\u{1F504} Loading full input controller in background..."),d||(d=(await import("./core/input-controller.js")).InputController),this.input&&this.input.destroy(),this.input=new d(e=>this.handleAction(e),()=>this.engine.getState(),this.config),console.log("\u2705 Full input controller loaded and ready")}loadNonCriticalSystems(){this.nonCriticalModulesLoaded||(this.nonCriticalModulesLoaded=!0,Promise.all([import("./gameplay/particles.js"),import("./gameplay/scoring.js"),import("./gameplay/starfield.js")]).then(([e,n,t])=>{h=e.ParticleSystem,g=n.ScoringSystem,m=t.createStarfieldRenderer,this.particles=new h,this.scoring=new g,this.starfield=m(),console.log("\u2705 Non-critical systems loaded in background")}).catch(e=>{console.warn("\u26A0\uFE0F Non-critical systems failed to load:",e)}))}initBlockchainInBackground(){setTimeout(async()=>{try{window.timeStart&&window.timeStart("initBlockchainInBackground"),console.log("\u{1F517} Starting background blockchain initialization..."),await this.blockchainManager.initialize(),console.log("\u2705 Blockchain initialized successfully"),this.engine&&this.engine.setBlockchainManager(this.blockchainManager),this.gameContext&&(this.gameContext.blockchain=this.blockchainManager),window.timeEnd&&window.timeEnd("initBlockchainInBackground")}catch(e){console.log("\u26A0\uFE0F Blockchain initialization failed (game continues without blockchain):",e)}},100)}setupUIBatched(){window.timeStart&&window.timeStart("setupUIBatched");const e=document.createDocumentFragment();this.cleanupOldUI(),console.log("\u2705 UI setup complete (batched)"),window.timeEnd&&window.timeEnd("setupUIBatched")}setupUI(){return this.setupUIBatched()}cleanupOldUI(){console.log("Simple UI cleanup complete")}startLoop(){this.running=!0,this.render(),requestAnimationFrame(()=>this.gameLoop())}gameLoop(){if(!this.running)return;const e=performance.now(),n=Math.min(e-this.lastTime,100);this.lastTime=e,this.accumulator+=n;const t=this.config.get("game.tickRate");let i=!1,s=0;const a=10;for(;this.accumulator>=t&&s<a;)this.update(t),this.accumulator-=t,i=!0,s++;s>=a&&(this.accumulator=0),(i||this.shouldRender())&&this.render(),requestAnimationFrame(()=>this.gameLoop())}update(e){try{this.engine&&this.engine.tick(e)}catch(n){console.error("Update error:",n)}}render(){if(!(!this.engine||!this.renderer))try{const e=this.engine.getState();if(!e)return;const n=this.engine.getParticles(),t={enabled:this.config.get("graphics.starfield")||!1,brightness:1,speed:.5};this.renderer.render(e,n,t)}catch(e){console.error("Render error:",e)}}shouldRender(){if(!this.engine)return!1;const e=this.engine.getState();return e?e.gameState==="PLAYING"?!0:this.frameNumber%60===0:!1}handleAction(e){switch((e.type==="PAUSE"||e.type==="GAME_OVER"||e.type==="RETURN_TO_MENU")&&this.input&&typeof this.input.clearAllRepeat=="function"&&this.input.clearAllRepeat(),e.type){case"START_GAME":this.startNewGame();break;case"RETURN_TO_MENU":this.returnToMenu();break;default:this.engine&&this.engine.handleInput(e);break}}handleResize(){if(!this.renderer||!this.viewport)return;const e=this.viewport.calculateOptimalDimensions(innerWidth,innerHeight),n=document.getElementById("game"),t=document.getElementById("bg");n&&t&&(n.width=e.canvasWidth,n.height=e.canvasHeight,t.width=innerWidth,t.height=innerHeight,this.renderer.dimensions=e),console.log("Resize handled")}showError(e){const n=document.createElement("div");n.style.cssText=`
            position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
            background: rgba(255,0,0,0.9); color: white; padding: 20px;
            border-radius: 10px; font-size: 18px; z-index: 10000; text-align: center;
        `,n.textContent=e,document.body.appendChild(n),setTimeout(()=>n.remove(),5e3)}returnToMenuViaStateManager(){console.log("Simple return to menu"),this.engine&&this.engine.returnToMenu()}destroy(){this.running=!1,this.audio?.destroy(),this.input?.destroy(),console.log("NeonDrop shutdown")}async startNewGame(){if(console.log("Resetting to menu"),window.skipValidation)console.log("\u{1F6A8} Skipping identity validation for new game (development bypass)");else try{typeof l<"u"&&l.validateIdentity?l.validateIdentity():console.log("\u26A0\uFE0F gameWrapper not available for validation - continuing anyway")}catch(e){if(console.error("Cannot start game without valid identity:",e),!window.location.hostname.includes("pages.dev"))return;console.log("\u{1F6A8} Development override - continuing despite validation error")}this.overlayManager.hideCurrent(),this.renderer&&typeof this.renderer.resetForNewGame=="function"&&this.renderer.resetForNewGame(),this.engine&&(this.engine.returnToMenu(),console.log("Game reset to menu - press spacebar to start"))}async startGame(){console.log("Starting game from menu"),this.engine&&(this.engine.startGame(),console.log("Game started successfully"))}returnToMenu(){console.log("Returning to menu"),this.overlayManager.hideCurrent(),this.stateMachine.transitionToGameState(f.MENU),this.engine&&this.engine.returnToMenu()}async showLeaderboard(){console.log("Showing leaderboard")}getConfig(){return this.config||{}}bindEvents(){if(this.eventsBound){console.log("Events already bound, skipping...");return}if(this.eventsBound=!0,console.log("Binding game events..."),!this.gameOverEventBound){this.gameOverEventBound=!0;const t=this;this.eventBus.on("gameOver",i=>{const{score:s,level:a,lines:E,time:S}=i;console.log("\u{1F3AE} Game over event received - starting visual sequence",{score:s,level:a,lines:E,time:S}),this.stateMachine.transitionToGameState(f.GAME_OVER)}),this.eventBus.on("gameOverUIReady",async i=>{const{score:s}=i;console.log("\u{1F3AE} Game over sequence complete - showing UI",{score:s}),console.log('\u{1F3AE} Calling overlayManager.show("gameOver", ...)');try{await this.overlayManager.show("gameOver",{score:s,level:0,lines:0,time:0}),console.log("\u2705 overlayManager.show() completed successfully")}catch(a){console.error("\u274C overlayManager.show() failed:",a)}})}this.eventBus.on("startGame",t=>{console.log("\u{1F3AE} startGame event received - calling startNewGame()"),this.startNewGame()});let e;addEventListener("resize",()=>{clearTimeout(e),e=setTimeout(()=>this.handleResize(),100)}),this.setupComprehensivePauseSystem(),addEventListener("keydown",t=>{t.key==="Backspace"&&t.target===document.body&&t.preventDefault();const i=this.engine?.getState();t.key===" "&&i&&(i.phase==="MENU"?(t.preventDefault(),console.log("Starting game from menu with SPACE"),this.startGame()):i.phase==="GAME_OVER"&&!this.gameOverProcessing?(t.preventDefault(),console.log("Starting new game after game over"),this.startNewGame()):i.phase==="PAUSED"&&this.pauseState?.isPaused&&(t.preventDefault(),console.log("Resuming from emergency pause with SPACE"),this.resumeFromPause()))}),window.BlockZoneMobile?.needsMobileControls()&&document.body.classList.add("touch-device");const n=r(()=>{this.audio&&this.audio.ctx&&this.audio.ctx.state==="suspended"&&this.audio.ctx.resume().then(()=>{console.log("\u2705 Audio context activated on user interaction")})},"ensureAudioWorks");document.addEventListener("keydown",n,{once:!0}),document.addEventListener("click",n,{once:!0}),document.addEventListener("touchstart",n,{once:!0})}setupComprehensivePauseSystem(){this.pauseState={isPaused:!1,pauseReason:null,lastPauseTime:0},document.addEventListener("visibilitychange",()=>{document.hidden&&this.engine?.getState().phase==="PLAYING"&&this.emergencyPause("PAGE_HIDDEN")}),window.addEventListener("blur",()=>{this.engine?.getState().phase==="PLAYING"&&this.emergencyPause("WINDOW_BLUR")}),window.addEventListener("focus",()=>{this.pauseState.isPaused&&this.pauseState.pauseReason==="WINDOW_BLUR"&&this.resumeFromPause()});let e;window.addEventListener("resize",()=>{this.engine?.getState().phase==="PLAYING"&&(clearTimeout(e),e=setTimeout(()=>{this.emergencyPause("RESIZE_EVENT")},100))}),document.addEventListener("fullscreenchange",()=>{this.engine?.getState().phase==="PLAYING"&&this.emergencyPause("FULLSCREEN_CHANGE")}),"getBattery"in navigator&&navigator.getBattery().then(n=>{n.addEventListener("levelchange",()=>{this.engine?.getState().phase==="PLAYING"&&this.emergencyPause("BATTERY_WARNING")})}),window.addEventListener("online",()=>{this.pauseState.isPaused&&this.pauseState.pauseReason==="NETWORK_OFFLINE"&&this.resumeFromPause()}),window.addEventListener("offline",()=>{this.engine?.getState().phase==="PLAYING"&&this.emergencyPause("NETWORK_OFFLINE")}),"Notification"in window&&Notification.permission==="granted"&&document.addEventListener("click",n=>{!(document.querySelector("#game-canvas")||document.body).contains(n.target)&&this.engine?.getState().phase==="PLAYING"&&this.emergencyPause("EXTERNAL_CLICK")}),console.log("\u{1F6E1}\uFE0F Comprehensive pause system activated")}emergencyPause(e){const n=Date.now(),t=this.engine?.getState();this.pauseState.isPaused&&n-this.pauseState.lastPauseTime<1e3||t&&t.phase==="PLAYING"&&(this.pauseState.isPaused=!0,this.pauseState.pauseReason=e,this.pauseState.lastPauseTime=n,console.log(`\u23F8\uFE0F Emergency pause triggered: ${e}`),this.engine.handleInput({type:"PAUSE"}),this.showPauseNotification(e))}resumeFromPause(){this.pauseState.isPaused&&(console.log(`\u25B6\uFE0F Resuming from pause: ${this.pauseState.pauseReason}`),this.pauseState.isPaused=!1,this.pauseState.pauseReason=null,this.engine.handleInput({type:"PAUSE"}),this.hidePauseNotification())}showPauseNotification(e){let n=document.getElementById("emergency-pause-notification");n||(n=document.createElement("div"),n.id="emergency-pause-notification",n.style.cssText=`
                position: fixed;
                top: 20px;
                right: 20px;
                background: rgba(255, 0, 0, 0.9);
                color: white;
                padding: 15px 20px;
                border-radius: 8px;
                font-family: 'Bungee', monospace;
                font-size: 14px;
                z-index: 10000;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                animation: slideIn 0.3s ease-out;
            `,document.body.appendChild(n));const t={PAGE_HIDDEN:"Game paused - Page hidden",WINDOW_BLUR:"Game paused - Window lost focus",RESIZE_EVENT:"Game paused - System overlay detected",FULLSCREEN_CHANGE:"Game paused - Display mode changed",BATTERY_WARNING:"Game paused - Battery warning",NETWORK_OFFLINE:"Game paused - Network disconnected",EXTERNAL_CLICK:"Game paused - External interaction"};n.textContent=t[e]||"Game paused - System interruption"}hidePauseNotification(){const e=document.getElementById("emergency-pause-notification");e&&(e.style.animation="slideOut 0.3s ease-in",setTimeout(()=>{e.parentNode&&e.parentNode.removeChild(e)},300))}}export async function startGame(){try{console.log("\u{1F3AE} Starting new NeonDrop instance..."),window.neonDrop&&window.neonDrop.destroy?.();const o=new w;return await o.initialize(),window.neonDrop=o,console.log("\u2705 NeonDrop instance created and stored in window.neonDrop"),!0}catch(o){return console.error("Failed to start NeonDrop:",o),!1}}r(startGame,"startGame"),window.startNeonDropGame=startGame,addEventListener("beforeunload",()=>window.neonDrop?.destroy());export{w as NeonDrop};
