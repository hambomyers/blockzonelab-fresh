var o=Object.defineProperty;var O=(T,t)=>o(T,"name",{value:t,configurable:!0});export class Config{static{O(this,"Config")}constructor(){this.data={},this.listeners=new Map,this.validators=new Map,this.setupValidators(),this.reset()}static CONSTANTS={BOARD:{WIDTH:10,HEIGHT:20,BLOCK_SIZE:24},TIMING:{TICK_RATE:16.67,LOCK_DELAY:750,LOCK_DELAY_FLOAT:900,LOCK_DELAY_DANGER:1500,MAX_LOCK_TIME:5e3,CLEAR_ANIMATION_TIME:200,SPAWN_FADE_TIME:400,GRAVITY_BASE:1e3,GRAVITY_MIN:100,getLockDelay:O((t,e)=>e<0?Config.CONSTANTS.TIMING.LOCK_DELAY_DANGER:t==="FLOAT"?Config.CONSTANTS.TIMING.LOCK_DELAY_FLOAT:Config.CONSTANTS.TIMING.LOCK_DELAY,"getLockDelay")},INPUT:{DAS_DELAY_DEFAULT:133,DAS_DELAY_MIN:50,DAS_DELAY_MAX:300,ARR_RATE_DEFAULT:10,ARR_RATE_MIN:0,ARR_RATE_MAX:50,SOUND_COOLDOWN:50,SWIPE_THRESHOLD_PHONE:25},SCORING:{SOFT_DROP:1,HARD_DROP:2,LINE_VALUES:[0,100,300,500,800],COMBO_VALUE:50,LINES_PER_LEVEL:10,PIECE_UNLOCK_INTERVAL:2e3},PIECES:{TYPES:["I","J","L","O","S","T","Z","FLOAT","PLUS","U","DOT","CORNER","PIPE","STAR","ZIGZAG","BRIDGE","DIAMOND","TWINS"],STANDARD:["I","J","L","O","S","T","Z"],SPECIAL:["FLOAT","PLUS","U","DOT","CORNER","PIPE","STAR","ZIGZAG","BRIDGE","DIAMOND","TWINS"],STARTING:["I","J","L","O","S","T","Z","FLOAT"],FLOAT_CHANCE:.07,FLOAT_MAX_UP_MOVES:7,SPECIAL_WEIGHT:.5,FLOAT_DYNAMIC_BOOST:{BASE_BOOST:.1,MAX_BOOST:.15,PROGRESS_BOOST:.1,ADVANCED_PIECES:["DOT","CORNER","PIPE","STAR","ZIGZAG","BRIDGE","DIAMOND","TWINS"],PROGRESSION_MILESTONES:[{pieces:0,boost:0},{pieces:50,boost:.02},{pieces:100,boost:.04},{pieces:200,boost:.06},{pieces:350,boost:.08},{pieces:500,boost:.1}]},UNLOCK_THRESHOLDS:{PLUS:2e3,U:4e3,DOT:6e3,CORNER:8e3,PIPE:1e4,STAR:12e3,ZIGZAG:14e3,BRIDGE:16e3,DIAMOND:18e3,TWINS:2e4},DEFINITIONS:{I:{shape:[[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]],color:"#00FFFF",spawn:{x:3,y:-2}},J:{shape:[[1,0,0],[1,1,1],[0,0,0]],color:"#0000FF",spawn:{x:3,y:-2}},L:{shape:[[0,0,1],[1,1,1],[0,0,0]],color:"#FF7F00",spawn:{x:3,y:-2}},O:{shape:[[1,1],[1,1]],color:"#FFFF00",spawn:{x:4,y:-2}},S:{shape:[[0,1,1],[1,1,0],[0,0,0]],color:"#00FF00",spawn:{x:3,y:-2}},T:{shape:[[0,1,0],[1,1,1],[0,0,0]],color:"#8A2BE2",spawn:{x:3,y:-2}},Z:{shape:[[1,1,0],[0,1,1],[0,0,0]],color:"#FF0000",spawn:{x:3,y:-2}},FLOAT:{shape:[[1]],color:"#FFFFFF",spawn:{x:4,y:-1},special:!0},PLUS:{shape:[[0,1,0],[1,1,1],[0,1,0]],color:"#DFFF00",spawn:{x:3,y:-3}},U:{shape:[[1,0,1],[1,0,1],[1,1,1]],color:"#FF69B4",spawn:{x:3,y:-3}},DOT:{shape:[[1,1,0],[1,0,1],[0,1,1]],color:"#000000",spawn:{x:3,y:-3}},CORNER:{shape:[[1,1,0],[1,0,0],[1,0,0]],color:"#BF00FF",spawn:{x:3,y:-3}},PIPE:{shape:[[1,0,1],[1,0,1],[1,0,1]],color:"#00FFCC",spawn:{x:3,y:-3}},STAR:{shape:[[1,0,1],[0,1,0],[1,0,1]],color:"#FF00FF",spawn:{x:3,y:-3}},ZIGZAG:{shape:[[1,0,0],[1,1,0],[0,1,1]],color:"#00FF7F",spawn:{x:3,y:-3}},BRIDGE:{shape:[[1,1,1],[0,0,0],[1,1,1]],color:"#FF4500",spawn:{x:3,y:-3}},DIAMOND:{shape:[[0,1,0],[1,0,1],[0,1,0]],color:"#7FFF00",spawn:{x:3,y:-3}},TWINS:{shape:[[1,0,1],[0,0,0],[1,0,1]],color:"#FF1493",spawn:{x:3,y:-3}}}},PARTICLES:{PER_BLOCK_MIN:15,PER_BLOCK_MAX:25,LIFETIME:1e3,GRAVITY:300,MAX_PARTICLES:500,BOARD_WIDTH:10},AUDIO:{MASTER_VOLUME_DEFAULT:.8,SOUND_COOLDOWN:50},BLOCKCHAIN:{MIN_SCORE_TO_SUBMIT:1e3,PROOF_CHECKPOINT_INTERVAL:60,DAILY_PRIZE_POOL:100,WINNER_PERCENTAGE:.6,HYPERBOLIC_K:.85,MINIMUM_REWARD:.01},UI:{MA_GAP:2,EDGE_GLOW_DISTANCE:2,EDGE_GLOW_OPACITY:.16,PREVIEW_SCALE:.75,HOLD_OPACITY_ACTIVE:.5,HOLD_OPACITY_INACTIVE:.25}};defaults(){return{game:{highScore:0,gamesPlayed:0,totalLines:0,totalScore:0,tickRate:Config.CONSTANTS.TIMING.TICK_RATE},graphics:{particles:!0,ghostPiece:!0,ghostPieceOpacity:.25,showFPS:!1,showGrid:!1,edgeGlow:!0,starfield:!1},audio:{masterVolume:Config.CONSTANTS.AUDIO.MASTER_VOLUME_DEFAULT,soundEffects:!0},input:{dasDelay:Config.CONSTANTS.INPUT.DAS_DELAY_DEFAULT,arrRate:Config.CONSTANTS.INPUT.ARR_RATE_DEFAULT},wallet:{connected:!1,address:null,network:"testnet"},gameplay:{unlockNotifications:!0}}}setupValidators(){this.validators.set("audio.masterVolume",t=>typeof t=="number"&&t>=0&&t<=1),this.validators.set("input.dasDelay",t=>typeof t=="number"&&t>=Config.CONSTANTS.INPUT.DAS_DELAY_MIN&&t<=Config.CONSTANTS.INPUT.DAS_DELAY_MAX),this.validators.set("input.arrRate",t=>typeof t=="number"&&t>=Config.CONSTANTS.INPUT.ARR_RATE_MIN&&t<=Config.CONSTANTS.INPUT.ARR_RATE_MAX)}async load(){try{const t=localStorage.getItem("neonDropConfig");if(t){const e=JSON.parse(t);this.data=this.merge(this.defaults(),e)}else this.data=this.defaults()}catch{this.data=this.defaults()}}save(){try{localStorage.setItem("neonDropConfig",JSON.stringify(this.data))}catch{}}get(t,e=void 0){const a=t.split(".");let s=this.data;for(const A of a)if(s=s?.[A],s===void 0)return e;return s}set(t,e){const a=this.validators.get(t);if(a&&!a(e))return!1;const s=t.split(".");let A=this.data;for(let r=0;r<s.length-1;r++)A[s[r]]||(A[s[r]]={}),A=A[s[r]];const E=s[s.length-1],I=A[E];return A[E]=e,this.save(),this.notify(t,e,I),!0}reset(t=null){if(t){const e=this.defaults();e[t]&&(this.data[t]=e[t],this.save(),this.notify(t,this.data[t],null))}else this.data=this.defaults(),this.save(),this.notify("",this.data,null)}onChange(t,e){return this.listeners.has(t)||this.listeners.set(t,new Set),this.listeners.get(t).add(e),()=>{this.listeners.get(t)?.delete(e)}}notify(t,e,a){this.listeners.get(t)?.forEach(A=>A(e,a,t));const s=t.split(".");for(let A=s.length-1;A>0;A--){const E=s.slice(0,A).join(".");this.listeners.get(E)?.forEach(I=>I(this.get(E),void 0,E))}this.listeners.get("")?.forEach(A=>A(this.data,void 0,""))}merge(t,e){const a={...t};for(const s in e)e.hasOwnProperty(s)&&(typeof e[s]=="object"&&e[s]!==null&&!Array.isArray(e[s])?a[s]=this.merge(a[s]||{},e[s]):a[s]=e[s]);return a}incrementStat(t,e=1){const a=this.get(t)||0;this.set(t,a+e)}getStats(){return{gamesPlayed:this.get("game.gamesPlayed")||0,highScore:this.get("game.highScore")||0,totalLines:this.get("game.totalLines")||0,totalScore:this.get("game.totalScore")||0,averageScore:this.get("game.gamesPlayed")>0?Math.floor((this.get("game.totalScore")||0)/this.get("game.gamesPlayed")):0}}}export const CONSTANTS=Config.CONSTANTS,PIECE_DEFINITIONS=Config.CONSTANTS.PIECES.DEFINITIONS,GAME_CONFIG={DROP_SPEEDS:{NORMAL:1e3,FAST:50,LOCK_DELAY:750,LOCK_DELAY_FLOAT:900,LOCK_DELAY_DANGER:1500,MAX_LOCK_TIME:5e3,CLEAR_ANIMATION_TIME:200,SPAWN_FADE_TIME:400},RENDERING:{FPS_TARGET:60,PARTICLE_LIMIT:500,EDGE_GLOW_DISTANCE:2,EDGE_GLOW_OPACITY:.16,PREVIEW_SCALE:.75,HOLD_OPACITY_ACTIVE:.5,HOLD_OPACITY_INACTIVE:.25},AUDIO:{COOLDOWNS:{LAND:50,ROTATE:100,CLEAR:200}},TRANSITIONS:{GAME_OVER_LOCKOUT:3e3,MENU_TRANSITION:500,COUNTDOWN_DURATION:3e3},PERFORMANCE:{FPS_TARGET:60,FPS_WARNING_THRESHOLD:50,FRAME_TIME_WARNING:20,LOG_INTERVAL:300,ENABLE_MONITORING:!0}},calculateGravityDelay=O((T,t,e)=>{const a=(Date.now()-T)/2e3,s=t/200,A=Math.max(a,s),E=Math.max(100,1e3-A*2),I=Math.pow(1.05,e-1);return Math.round(E*I)},"calculateGravityDelay"),calculateReward=O((T,t,e)=>{const a=CONSTANTS.BLOCKCHAIN;if(T===1)return e*a.WINNER_PERCENTAGE;const E=e*(1-a.WINNER_PERCENTAGE)*a.HYPERBOLIC_K/Math.pow(T,1.5);return Math.max(E,a.MINIMUM_REWARD)},"calculateReward");
