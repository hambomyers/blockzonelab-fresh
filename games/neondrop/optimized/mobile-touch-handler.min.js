var a=Object.defineProperty;var n=(r,e)=>a(r,"name",{value:e,configurable:!0});console.log("\u{1F4F1} Loading Modern Mobile Touch Handler...");class l{static{n(this,"ModernMobileTouchHandler")}constructor(){this.isMobile=this.detectMobile(),this.isTablet=this.detectTablet(),this.hasTouch=this.detectTouch(),this.touchStartX=0,this.touchStartY=0,this.touchStartTime=0,this.longPressTimer=null,this.longPressThreshold=500,this.swipeThreshold=30,this.isLongPressing=!1,(this.isMobile||this.isTablet||this.hasTouch)&&this.initialize()}detectMobile(){return window.innerWidth<=768||/Android|iPhone|iPad|iPod/i.test(navigator.userAgent)}detectTablet(){return window.innerWidth>768&&window.innerWidth<=1024&&"ontouchstart"in window}detectTouch(){return"ontouchstart"in window||navigator.maxTouchPoints>0}initialize(){console.log("\u{1F4F1} Modern Mobile Touch Handler: Initializing swipe controls"),this.removeOldTouchControls(),this.addSwipeListeners(),this.addSpaceBarSimulation(),this.preventMobileIssues(),console.log("\u2705 Modern swipe controls initialized")}removeOldTouchControls(){const e=document.getElementById("touch-controls");e&&(e.style.display="none",console.log("\u{1F4F1} Removed old touch controls"))}addSwipeListeners(){const e=document.getElementById("game"),t=document.getElementById("bg");if(!e){console.warn("\u{1F4F1} Game canvas not found, adding listeners to body"),this.addSwipeListenersToElement(document.body);return}this.addSwipeListenersToElement(e),t&&this.addSwipeListenersToElement(t),console.log("\u{1F4F1} Swipe listeners added to game canvas")}addSwipeListenersToElement(e){e.addEventListener("touchstart",t=>{t.preventDefault();const o=t.touches[0];this.touchStartX=o.clientX,this.touchStartY=o.clientY,this.touchStartTime=Date.now(),this.isLongPressing=!1,this.longPressTimer=setTimeout(()=>{this.isLongPressing=!0,this.handleLongPress()},this.longPressThreshold),console.log("\u{1F4F1} Touch started at:",this.touchStartX,this.touchStartY)},{passive:!1}),e.addEventListener("touchmove",t=>{t.preventDefault(),this.longPressTimer&&(clearTimeout(this.longPressTimer),this.longPressTimer=null);const o=t.touches[0],s=o.clientX-this.touchStartX,i=o.clientY-this.touchStartY;(Math.abs(s)>10||Math.abs(i)>10)&&(this.isLongPressing=!1)},{passive:!1}),e.addEventListener("touchend",t=>{if(t.preventDefault(),this.longPressTimer&&(clearTimeout(this.longPressTimer),this.longPressTimer=null),this.isLongPressing){this.isLongPressing=!1;return}const o=t.changedTouches[0],s=o.clientX-this.touchStartX,i=o.clientY-this.touchStartY;Date.now()-this.touchStartTime<300&&(Math.abs(s)>this.swipeThreshold?s>0?this.handleSwipeRight():this.handleSwipeLeft():Math.abs(i)>this.swipeThreshold?i>0?this.handleSwipeDown():this.handleSwipeUp():this.handleTap())},{passive:!1}),e.addEventListener("touchcancel",t=>{t.preventDefault(),this.longPressTimer&&(clearTimeout(this.longPressTimer),this.longPressTimer=null),this.isLongPressing=!1},{passive:!1})}handleSwipeLeft(){console.log("\u{1F4F1} Swipe Left: Move piece left"),this.simulateKeyPress("ArrowLeft")}handleSwipeRight(){console.log("\u{1F4F1} Swipe Right: Move piece right"),this.simulateKeyPress("ArrowRight")}handleSwipeDown(){console.log("\u{1F4F1} Swipe Down: Soft drop"),this.simulateKeyPress("ArrowDown")}handleSwipeUp(){console.log("\u{1F4F1} Swipe Up: Rotate piece"),this.simulateKeyPress("ArrowUp")}handleTap(){console.log("\u{1F4F1} Tap: Rotate piece"),this.simulateKeyPress("ArrowUp")}handleLongPress(){console.log("\u{1F4F1} Long Press: Hard drop"),this.simulateKeyPress("Space")}simulateKeyPress(e){const t=new KeyboardEvent("keydown",{key:e,code:e==="Space"?"Space":`Key${e}`,keyCode:e==="Space"?32:e.charCodeAt(0),which:e==="Space"?32:e.charCodeAt(0),bubbles:!0,cancelable:!0});document.dispatchEvent(t),window.neonDrop&&window.neonDrop.inputController&&window.neonDrop.inputController.handleKeyDown(t)}addSpaceBarSimulation(){const e=document.createElement("div");e.id="space-indicator",e.innerHTML=`
            <div style="
                position: fixed;
                bottom: 20px;
                left: 50%;
                transform: translateX(-50%);
                background: rgba(0, 212, 255, 0.2);
                border: 2px solid #00d4ff;
                border-radius: 25px;
                padding: 15px 30px;
                color: #00d4ff;
                font-family: 'Bungee', monospace;
                font-size: 14px;
                font-weight: bold;
                text-align: center;
                z-index: 1000;
                backdrop-filter: blur(10px);
                box-shadow: 0 0 20px rgba(0, 212, 255, 0.3);
                display: none;
            ">
                <div style="margin-bottom: 5px;">\u{1F3AE} GAME CONTROLS</div>
                <div style="font-size: 12px; opacity: 0.8;">
                    \u2190 \u2192 Move | \u2193 Drop | Tap Rotate | Hold Hard Drop
                </div>
            </div>
        `,document.body.appendChild(e);const t=n(()=>{e.style.display="block"},"showIndicator"),o=n(()=>{e.style.display="none"},"hideIndicator");window.addEventListener("gameStarted",t),window.addEventListener("gamePaused",o),window.addEventListener("gameOver",o),setTimeout(o,5e3)}preventMobileIssues(){document.querySelectorAll("input, textarea, select").forEach(t=>{t.style.fontSize="16px"}),document.body.style.overscrollBehavior="none",document.body.style.webkitUserSelect="none",document.body.style.userSelect="none",document.body.style.webkitTouchCallout="none",document.body.style.webkitTapHighlightColor="transparent",console.log("\u{1F4F1} Mobile issues prevented")}addSwipeEventsToElement(e){e&&this.addSwipeListenersToElement(e)}}const d=new l;window.modernMobileTouchHandler=d;export{l as ModernMobileTouchHandler};
